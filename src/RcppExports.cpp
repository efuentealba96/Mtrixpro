// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cbind_rcpp
NumericMatrix cbind_rcpp(NumericMatrix A, NumericVector B);
RcppExport SEXP _Mtrixpro_cbind_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(cbind_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mMatrix_rcpp
NumericMatrix mMatrix_rcpp(NumericMatrix A, NumericMatrix B);
RcppExport SEXP _Mtrixpro_mMatrix_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mMatrix_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// maxMin_cpp
NumericMatrix maxMin_cpp(NumericMatrix matrixA, NumericMatrix matrixB);
RcppExport SEXP _Mtrixpro_maxMin_cpp(SEXP matrixASEXP, SEXP matrixBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrixA(matrixASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type matrixB(matrixBSEXP);
    rcpp_result_gen = Rcpp::wrap(maxMin_cpp(matrixA, matrixB));
    return rcpp_result_gen;
END_RCPP
}
// rbind_rcpp
NumericMatrix rbind_rcpp(NumericMatrix A, NumericVector B);
RcppExport SEXP _Mtrixpro_rbind_rcpp(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(rbind_rcpp(A, B));
    return rcpp_result_gen;
END_RCPP
}
// whichMax
DataFrame whichMax(NumericMatrix matrix_A);
RcppExport SEXP _Mtrixpro_whichMax(SEXP matrix_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix_A(matrix_ASEXP);
    rcpp_result_gen = Rcpp::wrap(whichMax(matrix_A));
    return rcpp_result_gen;
END_RCPP
}
// whichMin
DataFrame whichMin(NumericMatrix matrix_A);
RcppExport SEXP _Mtrixpro_whichMin(SEXP matrix_ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix_A(matrix_ASEXP);
    rcpp_result_gen = Rcpp::wrap(whichMin(matrix_A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Mtrixpro_cbind_rcpp", (DL_FUNC) &_Mtrixpro_cbind_rcpp, 2},
    {"_Mtrixpro_mMatrix_rcpp", (DL_FUNC) &_Mtrixpro_mMatrix_rcpp, 2},
    {"_Mtrixpro_maxMin_cpp", (DL_FUNC) &_Mtrixpro_maxMin_cpp, 2},
    {"_Mtrixpro_rbind_rcpp", (DL_FUNC) &_Mtrixpro_rbind_rcpp, 2},
    {"_Mtrixpro_whichMax", (DL_FUNC) &_Mtrixpro_whichMax, 1},
    {"_Mtrixpro_whichMin", (DL_FUNC) &_Mtrixpro_whichMin, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_Mtrixpro(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
